#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, typing
from typing import Union
DATA_SIZE = 1375

SYN = 0
ACK = 1
FIN = 2
packet_flag_dict = {"syn": SYN, "ack": ACK, "fin": FIN}

class Packet:
    def __init__(self, flag: Union[int, str], seq_num: int, data: bytes):
        # Convert readable flag to int
        if type(flag) is str:
            self.flag = packet_flag_dict[flag]
        else:
            self.flag = flag
        self.seq_num = seq_num
        self.data = data
        self.check_sum = Packet.calculate_checksum(struct.pack("!bi", self.flag, self.seq_num) + self.data)

    def __str__(self) -> str:
        return str({"flag": self.flag, "seq_num": self.seq_num, "check_sum": self.check_sum, "data": self.data})

    def pack(self) -> bytes:
        return struct.pack("!bii", self.flag, self.seq_num, self.check_sum) + self.data

    @staticmethod
    def unpack(b_a: bytes) -> 'Packet':
        try:
            header = struct.unpack("!bii", b_a[0:9])
            if header[0] not in [0,1,2]:
                raise Exception("error: wrong flag")
            # Check Packet
            if Packet.calculate_checksum(header[0].to_bytes(1, 'big') + header[1].to_bytes(4, 'big') + b_a[9:]) != header[2]:
                raise Exception("error: invalid checksum")
        except Exception as e:
            # self.log("error: unpack failed: %s" % str(e))
            return None
        return Packet(header[0], header[1], b_a[9:])

    @staticmethod
    def calculate_checksum(content: bytes):
        # Divide the packet into 16-bit words and calculate the sum
        if len(content) % 2 != 0:
            content += b'\x00'  # Pad the packet if the length is not a multiple of 16 bits
        words = struct.unpack('!%dH' % (len(content) // 2), content)
        total = sum(words)

        # Add the high 16 bits and low 16 bits of the sum until the high 16 bits become 0
        while (total >> 16) > 0:
            total = (total & 0xFFFF) + (total >> 16)

        # Take the complement to get the checksum
        checksum = ~total & 0xFFFF
        return checksum

class SendWindow:
    def __init__(self, socket :socket.socket, to_addr: str, to_port: int):
        # sliding window length
        self.w_len = 7
        # sliding window head index
        self.w_head = 0
        self.buf = []
        self.is_ack = []
        self.socket = socket
        self.to_addr = to_addr
        self.to_port = int(to_port)
        self.waiting_time = 0.2
        self.empty = True

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()
    
    def add_pkt(self, pkt: Packet):
        # value:(pkt, last time sent, number of times sent)
        self.buf.append({"pkt":pkt, "lts":0, "nts": 0})
        self.is_ack.append(False)
        self.empty = False

    def sliding(self):
        offset = 0
        while (self.w_head + offset) < len(self.buf) and self.is_ack[self.w_head + offset]:
            offset += 1
        self.w_head += offset
        if self.w_head == len(self.buf):
            self.empty = True

    def range_window(self):
        return range(self.w_head, min(self.w_head + self.w_len, len(self.buf)))

    def check_recv_ack(self, bytes: bytes):
        pkt = Packet.unpack(bytes)
        if pkt is not None:
            self.log("seq:%d"%pkt.seq_num)
            self.log("self.w_head:%d" %self.w_head)
            self.log("range:" +str(list(self.range_window())) )
            self.log("is_ack:" + str([self.is_ack[i] for i in self.range_window()] ))
        if pkt is not None:
            self.log("Received message '%s'" % pkt)
            # fast retry
            if pkt.flag is SYN:
                for i in range(self.w_head, pkt.seq_num+1):
                    self.buf[i]["nts"] = 0
                self.send_pkts_in_window()
            # sliding window
            elif pkt.seq_num in self.range_window():
                
                self.is_ack[pkt.seq_num] = True
                self.sliding()

    def send(self, pkt: Packet):
        self.log("Sending message '%s'" % pkt)
        self.socket.sendto(pkt.pack(), (self.to_addr, self.to_port))

    def send_pkts_in_window(self):
        for i in self.range_window():
            if not self.is_ack[i] and time.time() - self.buf[i]["lts"] > min(1, self.waiting_time * 2 ** self.buf[i]["nts"]):
                self.send(self.buf[i]["pkt"])
                self.buf[i]["lts"] = time.time()
                self.buf[i]["nts"] += 1


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.send_window = SendWindow(self.socket, host, port)

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    bytes_data, addr = conn.recvfrom(65535)
                    self.send_window.check_recv_ack(bytes_data)

                elif conn == sys.stdin:
                    str_data = sys.stdin.read(DATA_SIZE)
                    if len(str_data) == 0:
                        self.log("All done!")
                        self.send_window.add_pkt(Packet("fin", len(self.send_window.buf), str_data.encode("utf-8")))
                        self.send_window.send_pkts_in_window()
                        while True:
                            socks = select.select([self.socket], [], [], 0.1)[0]
                            for conn in socks:
                                bytes_data, addr = conn.recvfrom(65535)
                                self.send_window.check_recv_ack(bytes_data)
                            if self.send_window.empty:
                                sys.exit(0)
                            else:
                                self.send_window.send_pkts_in_window()

                    print(str_data.encode("utf-8"))
                    self.send_window.add_pkt(Packet("ack", len(self.send_window.buf), str_data.encode("utf-8")))
                    self.send_window.send_pkts_in_window()
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()

