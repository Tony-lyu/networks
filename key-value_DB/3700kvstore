#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.term = 0
        self.leader = BROADCAST
        self.in_election = True
        self.get_votes = set()

        self.fail_resend = []

        self.last_beat_time = time.time()
        self.timeout = random.uniform(1, 3)
        
        self.db = {}

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        # print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        # print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))
        # print("Sent message: %s" % message, flush=True)

# RAFT_VOTE ----------------------------------------
    def send_raft_vote_request(self):
        for id in self.others:
            msg = { "src": self.id, "dst": id, "leader":self.leader, 
                    "type": "raft","type2":"vote_request", "term": self.term }
            self.send(msg)

    def send_raft_vote_response(self, id):
        msg = { "src": self.id, "dst": id, "leader":self.leader, "type": "raft","type2":"vote_response" }
        self.send(msg)

    def send_raft_leader_beat(self):
        for id in self.others:
            msg = { "src": self.id, "dst": id, "type": "raft","type2":"leader_beat", 
                    "leader": self.leader ,"term":self.term, "db":self.db}
            self.send(msg)


    def parse_raft_vote_request(self, msg):
        if msg["term"] > self.term:
            self.in_election = True
            self.term = msg["term"]
            self.leader = BROADCAST
            self.last_beat_time = time.time()
            self.send_raft_vote_response(msg["src"])

    def parse_raft_vote_response(self, msg):
        if self.in_election:
            self.get_votes.add(msg["src"])
            if len(self.get_votes) > len(self.others) // 2:
                self.leader = self.id
                self.in_election = False
                self.get_votes = set()
                self.send_raft_leader_beat()
                self.last_beat_time = time.time()
            
    
    def parse_raft_leader_beat(self, msg):
        self.in_election = False
        self.term = msg["term"]
        self.leader = msg["leader"]
        self.get_votes = set()
        self.db = msg["db"]
        self.last_beat_time = time.time()
# ---------------------------------------------

# DB_SERVICE------------------------------------
    def send_redirect(self, dst, MID):
        msg = {"src": self.id, "dst": dst, "leader": self.leader, "type": "redirect", "MID": MID}
        self.send(msg)

    def send_ok(self, dst, MID, value = None):
        if value is None:
            msg = {"src": self.id, "dst": dst, "leader": self.leader, "type": "ok", "MID": MID}
        else:
            msg = {"src": self.id, "dst": dst, "leader": self.leader, "type": "ok", "MID": MID, "value": value}
        self.send(msg)

    def send_fail(self, dst, MID):
        msg = {"src": self.id, "dst": dst, "leader": self.leader, "type": "fail", "MID": MID}
        self.send(msg)

    def parse_put(self, msg):
        if self.leader == self.id:
            self.db[msg["key"]] = msg["value"]
            self.send_ok(msg["src"], msg["MID"])
        else:
            self.send_redirect(msg["src"], msg["MID"])

    def parse_get(self, msg):
        value = ""
        if msg["key"] in self.db:
            value = self.db[msg["key"]]
        self.send_ok(msg["src"], msg["MID"], value)
        
# ---------------------------------------------

    def run(self):
        while True:
            # heartbeat check
            if self.leader == self.id:
                if time.time() - self.last_beat_time > self.timeout / 3:
                    self.send_raft_leader_beat()
            else:
                if time.time() - self.last_beat_time > self.timeout:
                    self.term += 1
                    self.in_election = True
                    self.leader = BROADCAST
                    self.get_votes.add(self.id)
                    self.send_raft_vote_request()
                    self.last_beat_time = time.time()
                    

            # candidate resend vote_request
            if self.in_election and len(self.get_votes) != 0:
                if time.time() - self.last_beat_time > self.timeout / 3:
                    self.send_raft_vote_request()

            # handle fail buffer to improve crash-4
            if not self.in_election:
                while len(self.fail_resend) != 0:
                    msg = self.fail_resend.pop()
                    if msg["type"] == "get":
                            self.parse_get(msg)
                    elif msg["type"] == "put":
                        self.parse_put(msg)

            # recv msg
            sockets = [self.socket]
            socks = select.select(sockets, [], [], self.timeout/10)[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)
                msg = data.decode('utf-8')
                # print("Received message '%s'" % (msg,), flush=True)
                msg = json.loads(msg)
                if msg["dst"] != self.id and msg["dst"] !=BROADCAST:
                    break

                if conn == self.socket:
                    if msg["type"] == "raft":
                        if msg["type2"] == "vote_request":
                            self.parse_raft_vote_request(msg)
                        elif msg["type2"] == "vote_response":
                            self.parse_raft_vote_response(msg)
                        elif msg["type2"] == "leader_beat":
                            self.parse_raft_leader_beat(msg)
                    elif self.in_election:
                        if len(self.fail_resend) < 10:
                            self.fail_resend.append(msg)
                        else:
                            self.send_fail(msg["src"], msg["MID"])
                    else:
                        if msg["type"] == "get":
                            self.parse_get(msg)
                        elif msg["type"] == "put":
                            self.parse_put(msg)

                elif conn == self.socket_raft:
                    if msg["type"] != "raft":
                        break
                    if msg["type2"] == "vote_request":
                        self.parse_raft_vote_request(msg)
                    elif msg["type2"] == "vote_response":
                        self.parse_raft_vote_response(msg)
                    elif msg["type2"] == "leader_beat":
                        self.parse_raft_leader_beat(msg)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
